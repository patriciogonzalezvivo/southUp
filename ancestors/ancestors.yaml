import:
    - https://tangrams.github.io/blocks/functions/zoom.yaml
    - https://tangrams.github.io/blocks/functions/aastep.yaml
    - https://tangrams.github.io/blocks/functions/decode.yaml
    - https://tangrams.github.io/blocks/geometry/matrices.yaml
    - https://tangrams.github.io/blocks/shapes/rect.yaml
    - https://tangrams.github.io/blocks/shapes/cross.yaml

sources:
    ancestors:
        type: GeoJSON
        url: sources/ancestors.json

textures:
    trips:
        url: sources/trips.png
        filtering: nearest

layers:
    ancestors:
        data: { source: ancestors }
        filter: { kind: trip }
        draw:
            lines:
                style: trips
                # width: [[0,.5px],[6,1px],[20,1m]]
                width: 10px
                order: 10002
                color: |
                    function(){
                        return [ ( Math.floor(feature.trip_id/255))/255, Math.floor(feature.trip_id%255)/255, 0 ]; 
                    }
    ancestors-places:
        data: { source: ancestors }
        filter: { kind: place }
        draw:
            points:
                size: [[0,0px],[10,10px]]
                color: [[0,[.7,.7,.7]], [10,[0,0,0]]]
                style: points-southup
                text:
                    style: text-southup
                    collide: true
                    font:
                        family: global.font_family
                        size: [[0,8px],[20,14px]]
                        fill: [[0,[.7,.7,.7]], [10,[0,0,0]]]
                        # stroke: { color: white, width: 3 }

styles:
    trips:
        base: lines
        mix: [lines-southup, functions-decode, functions-zoom, functions-aastep]
        # dash: [4, 2]
        lighting: false
        texcoords: true
        animated: true
        blend: inlay
        shaders:
            defines:
                ZOOM_START: 0
                ZOOM_END: 22
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
                QUATER_PI: .785398163
                TWO_PI: 6.283185307
                EARTH_RADIUS: 6378137.0
            uniforms:
                u_data: trips
                u_res: [1696, 36]
            blocks:
                global: |
                    float getIndex (vec2 encodedIndex) {
                        return (encodedIndex.x*65025.+encodedIndex.y*255.)+.5;
                    }

                    vec2 getPosition(float index, float pct) {
                        index *= 2.;
                        float limit = floor(getNumber(u_data, u_res, 0., index));
                        float lon = getUFloat(u_data, u_res, 1.+floor(pct*limit), index);
                        float lat = getUFloat(u_data, u_res, 1.+floor(pct*limit), index+1.);
                        return vec2(lon,lat);
                    }
                color: |
                    // Locate the satellite
                    //===============================
                    float index = getIndex(color.st);
                    vec2 pos = getPosition(index, fract(u_time*.01));
                    pos = (((pos*2.)-1.)*PI)*EARTH_RADIUS;
                    vec2 worldPos = u_map_position.xy+v_position.xy*-1.;
                    vec2 st = (worldPos-pos)*.0000002;

                    float z = zoom();
                    st *= 1.5+z*z*5000.;

                    color = vec4(1.,0.,0.,1.)*step(.98,sin(v_texcoord.x*PI));
                    color += vec4(1.0,.5,0.,1.)*aastep(.5,1.-dot(st,st)*2.);
                    


